spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: "http://localhost:8080/realms/master/protocol/openid-connect/certs"
  data:
    redis:
      connect-timeout: 2s
      host: localhost
      port: 6379
      timeout: 1s
  cloud:
    gateway:
      server:
        webflux:
          httpclient:
            connect-timeout: 1000
            response-timeout: 10s
    kubernetes:
      discovery:
        all-namespaces: true
        # Telling Gateway server to forward request to the other
        # microservice
        enabled: true
    discovery:
      client:
        health-indicator:
          enabled: false
  application:
    name: gatewayserver
  config:
    import: optional:configserver:http://localhost:8071/

# Enable actuator
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    gateway:
      access: unrestricted
  info:
    env:
      enabled: true


info:
  app:
    name: gatewayserver
    description: Gatewayserver Microservice
    version: 1.0.0

logging:
  level:
    com:
      eazybytes:
        gatewayserver: DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

resilience4j.circuitbreaker:
  configs:
    default:
      sliding-window-size: 5
      permitted-number-of-calls-in-half-open-state: 2
      failure-rate-threshold: 50
      wait-duration-in-open-state: 10000
